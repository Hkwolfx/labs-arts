{"ast":null,"code":"import { hachureLinesForPolygon, hachureLinesForEllipse } from 'roughjs/bin/fillers/filler-utils';\nconst __maxRandomnessOffset = 2;\nconst __roughness = 1;\nconst __bowing = 0.85;\nconst __curveTightness = 0;\nconst __curveStepCount = 9;\n\nclass WiresPath {\n  constructor() {\n    this.p = '';\n  }\n\n  get value() {\n    return this.p.trim();\n  }\n\n  moveTo(x, y) {\n    this.p = `${this.p}M ${x} ${y} `;\n  }\n\n  bcurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n    this.p = `${this.p}C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${x} ${y} `;\n  }\n\n}\n\nexport function svgNode(tagName, attributes) {\n  const n = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n\n  if (attributes) {\n    for (const p in attributes) {\n      n.setAttributeNS(null, p, attributes[p]);\n    }\n  }\n\n  return n;\n}\n\nfunction _getOffset(min, max) {\n  return __roughness * (Math.random() * (max - min) + min);\n}\n\nfunction _line(x1, y1, x2, y2, existingPath) {\n  const lengthSq = Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2);\n  let offset = __maxRandomnessOffset || 0;\n\n  if (offset * offset * 100 > lengthSq) {\n    offset = Math.sqrt(lengthSq) / 10;\n  }\n\n  const halfOffset = offset / 2;\n  const divergePoint = 0.2 + Math.random() * 0.2;\n  let midDispX = __bowing * __maxRandomnessOffset * (y2 - y1) / 200;\n  let midDispY = __bowing * __maxRandomnessOffset * (x1 - x2) / 200;\n  midDispX = _getOffset(-midDispX, midDispX);\n  midDispY = _getOffset(-midDispY, midDispY);\n  const path = existingPath || new WiresPath();\n  path.moveTo(x1 + _getOffset(-offset, offset), y1 + _getOffset(-offset, offset));\n  path.bcurveTo(midDispX + x1 + (x2 - x1) * divergePoint + _getOffset(-offset, offset), midDispY + y1 + (y2 - y1) * divergePoint + _getOffset(-offset, offset), midDispX + x1 + 2 * (x2 - x1) * divergePoint + _getOffset(-offset, offset), midDispY + y1 + 2 * (y2 - y1) * divergePoint + _getOffset(-offset, offset), x2 + _getOffset(-offset, offset), y2 + _getOffset(-offset, offset));\n  path.moveTo(x1 + _getOffset(-halfOffset, halfOffset), y1 + _getOffset(-halfOffset, halfOffset));\n  path.bcurveTo(midDispX + x1 + (x2 - x1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispY + y1 + (y2 - y1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispX + x1 + 2 * (x2 - x1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispY + y1 + 2 * (y2 - y1) * divergePoint + _getOffset(-halfOffset, halfOffset), x2 + _getOffset(-halfOffset, halfOffset), y2 + _getOffset(-halfOffset, halfOffset));\n  return path;\n}\n\nfunction _continuousLine(x1, y1, x2, y2, move = false, overwrite = false, path) {\n  path = path || new WiresPath();\n  const lengthSq = Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2);\n  let offset = __maxRandomnessOffset || 0;\n\n  if (offset * offset * 100 > lengthSq) {\n    offset = Math.sqrt(lengthSq) / 10;\n  }\n\n  const halfOffset = offset / 2;\n  const divergePoint = 0.2 + Math.random() * 0.2;\n  let midDispX = __bowing * __maxRandomnessOffset * (y2 - y1) / 200;\n  let midDispY = __bowing * __maxRandomnessOffset * (x1 - x2) / 200;\n  midDispX = _getOffset(-midDispX, midDispX);\n  midDispY = _getOffset(-midDispY, midDispY);\n\n  if (move) {\n    path.moveTo(x1 + _getOffset(-offset, offset), y1 + _getOffset(-offset, offset));\n  }\n\n  if (!overwrite) {\n    path.bcurveTo(midDispX + x1 + (x2 - x1) * divergePoint + _getOffset(-offset, offset), midDispY + y1 + (y2 - y1) * divergePoint + _getOffset(-offset, offset), midDispX + x1 + 2 * (x2 - x1) * divergePoint + _getOffset(-offset, offset), midDispY + y1 + 2 * (y2 - y1) * divergePoint + _getOffset(-offset, offset), x2 + _getOffset(-offset, offset), y2 + _getOffset(-offset, offset));\n  } else {\n    path.bcurveTo(midDispX + x1 + (x2 - x1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispY + y1 + (y2 - y1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispX + x1 + 2 * (x2 - x1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispY + y1 + 2 * (y2 - y1) * divergePoint + _getOffset(-halfOffset, halfOffset), x2 + _getOffset(-halfOffset, halfOffset), y2 + _getOffset(-halfOffset, halfOffset));\n  }\n\n  return path;\n}\n\nfunction _curve(vertArray, existingPath) {\n  const vertArrayLength = vertArray.length;\n  let path = existingPath || new WiresPath();\n\n  if (vertArrayLength > 3) {\n    const b = [];\n    const s = 1 - __curveTightness;\n    path.moveTo(vertArray[1][0], vertArray[1][1]);\n\n    for (let i = 1; i + 2 < vertArrayLength; i++) {\n      const cachedVertArray = vertArray[i];\n      b[0] = [cachedVertArray[0], cachedVertArray[1]];\n      b[1] = [cachedVertArray[0] + (s * vertArray[i + 1][0] - s * vertArray[i - 1][0]) / 6, cachedVertArray[1] + (s * vertArray[i + 1][1] - s * vertArray[i - 1][1]) / 6];\n      b[2] = [vertArray[i + 1][0] + (s * vertArray[i][0] - s * vertArray[i + 2][0]) / 6, vertArray[i + 1][1] + (s * vertArray[i][1] - s * vertArray[i + 2][1]) / 6];\n      b[3] = [vertArray[i + 1][0], vertArray[i + 1][1]];\n      path.bcurveTo(b[1][0], b[1][1], b[2][0], b[2][1], b[3][0], b[3][1]);\n    }\n  } else if (vertArrayLength === 3) {\n    path.moveTo(vertArray[0][0], vertArray[0][1]);\n    path.bcurveTo(vertArray[1][0], vertArray[1][1], vertArray[2][0], vertArray[2][1], vertArray[2][0], vertArray[2][1]);\n  } else if (vertArrayLength === 2) {\n    path = _line(vertArray[0][0], vertArray[0][1], vertArray[1][0], vertArray[1][1], path);\n  }\n\n  return path;\n}\n\nfunction _ellipse(ellipseInc, cx, cy, rx, ry, offset, overlap, existingPath) {\n  const radOffset = _getOffset(-0.5, 0.5) - Math.PI / 2;\n  const points = [];\n  points.push([_getOffset(-offset, offset) + cx + 0.9 * rx * Math.cos(radOffset - ellipseInc), _getOffset(-offset, offset) + cy + 0.9 * ry * Math.sin(radOffset - ellipseInc)]);\n\n  for (let angle = radOffset; angle < Math.PI * 2 + radOffset - 0.01; angle = angle + ellipseInc) {\n    points.push([_getOffset(-offset, offset) + cx + rx * Math.cos(angle), _getOffset(-offset, offset) + cy + ry * Math.sin(angle)]);\n  }\n\n  points.push([_getOffset(-offset, offset) + cx + rx * Math.cos(radOffset + Math.PI * 2 + overlap * 0.5), _getOffset(-offset, offset) + cy + ry * Math.sin(radOffset + Math.PI * 2 + overlap * 0.5)]);\n  points.push([_getOffset(-offset, offset) + cx + 0.98 * rx * Math.cos(radOffset + overlap), _getOffset(-offset, offset) + cy + 0.98 * ry * Math.sin(radOffset + overlap)]);\n  points.push([_getOffset(-offset, offset) + cx + 0.9 * rx * Math.cos(radOffset + overlap * 0.5), _getOffset(-offset, offset) + cy + 0.9 * ry * Math.sin(radOffset + overlap * 0.5)]);\n  return _curve(points, existingPath);\n}\n\nexport function line(parent, x1, y1, x2, y2) {\n  const path = _line(x1, y1, x2, y2);\n\n  const node = svgNode('path', {\n    d: path.value\n  });\n  parent.appendChild(node);\n  return node;\n}\nexport function rectangle(parent, x, y, width, height) {\n  x = x + 2;\n  y = y + 2;\n  width = width - 4;\n  height = height - 4;\n\n  let path = _line(x, y, x + width, y);\n\n  path = _line(x + width, y, x + width, y + height, path);\n  path = _line(x + width, y + height, x, y + height, path);\n  path = _line(x, y + height, x, y, path);\n  const node = svgNode('path', {\n    d: path.value\n  });\n  parent.appendChild(node);\n  return node;\n}\nexport function polygon(parent, vertices) {\n  let path;\n  const vCount = vertices.length;\n\n  if (vCount > 2) {\n    for (let i = 0; i < 2; i++) {\n      let move = true;\n\n      for (let i = 1; i < vCount; i++) {\n        path = _continuousLine(vertices[i - 1][0], vertices[i - 1][1], vertices[i][0], vertices[i][1], move, i > 0, path);\n        move = false;\n      }\n\n      path = _continuousLine(vertices[vCount - 1][0], vertices[vCount - 1][1], vertices[0][0], vertices[0][1], move, i > 0, path);\n    }\n  } else if (vCount === 2) {\n    path = _line(vertices[0][0], vertices[0][1], vertices[1][0], vertices[1][1]);\n  } else {\n    path = new WiresPath();\n  }\n\n  const node = svgNode('path', {\n    d: path.value\n  });\n  parent.appendChild(node);\n  return node;\n}\nexport function ellipse(parent, x, y, width, height) {\n  width = Math.max(width > 10 ? width - 4 : width - 1, 1);\n  height = Math.max(height > 10 ? height - 4 : height - 1, 1);\n  const ellipseInc = Math.PI * 2 / __curveStepCount;\n  let rx = Math.abs(width / 2);\n  let ry = Math.abs(height / 2);\n  rx += _getOffset(-rx * 0.05, rx * 0.05);\n  ry += _getOffset(-ry * 0.05, ry * 0.05);\n\n  let path = _ellipse(ellipseInc, x, y, rx, ry, 1, ellipseInc * _getOffset(0.1, _getOffset(0.4, 1)));\n\n  path = _ellipse(ellipseInc, x, y, rx, ry, 1.5, 0, path);\n  const node = svgNode('path', {\n    d: path.value\n  });\n  parent.appendChild(node);\n  return node;\n}\n\nfunction renderHachureLines(lines) {\n  const gNode = svgNode('g');\n  let prevPoint = null;\n  lines.forEach(l => {\n    line(gNode, l[0][0], l[0][1], l[1][0], l[1][1]);\n\n    if (prevPoint) {\n      line(gNode, prevPoint[0], prevPoint[1], l[0][0], l[0][1]);\n    }\n\n    prevPoint = l[1];\n  });\n  return gNode;\n}\n\nconst options = {\n  bowing: __bowing,\n  curveStepCount: __curveStepCount,\n  curveTightness: __curveTightness,\n  dashGap: 0,\n  dashOffset: 0,\n  fill: '#000',\n  fillStyle: 'hachure',\n  fillWeight: 1,\n  hachureAngle: -41,\n  hachureGap: 5,\n  maxRandomnessOffset: __maxRandomnessOffset,\n  roughness: __roughness,\n  simplification: 1,\n  stroke: '#000',\n  strokeWidth: 2,\n  zigzagOffset: 0\n};\nexport function hachureFill(points) {\n  const lines = hachureLinesForPolygon(points, options);\n  return renderHachureLines(lines);\n}\nexport function hachureEllipseFill(cx, cy, width, height) {\n  const helper = {\n    randOffset(x, _o) {\n      return _getOffset(-x, x);\n    }\n\n  };\n  const lines = hachureLinesForEllipse(helper, cx, cy, width, height, options);\n  return renderHachureLines(lines);\n}\nexport function fire(element, name, detail, bubbles = true, composed = true) {\n  if (name) {\n    const init = {\n      bubbles: typeof bubbles === 'boolean' ? bubbles : true,\n      composed: typeof composed === 'boolean' ? composed : true\n    };\n\n    if (detail) {\n      init.detail = detail;\n    }\n\n    const CE = window.SlickCustomEvent || CustomEvent;\n    element.dispatchEvent(new CE(name, init));\n  }\n}","map":{"version":3,"sources":["/home/hkwolfx/Documents/reactapps/labs_arts/labs-arts/FRONT/node_modules/wired-lib/lib/wired-lib.js"],"names":["hachureLinesForPolygon","hachureLinesForEllipse","__maxRandomnessOffset","__roughness","__bowing","__curveTightness","__curveStepCount","WiresPath","constructor","p","value","trim","moveTo","x","y","bcurveTo","cp1x","cp1y","cp2x","cp2y","svgNode","tagName","attributes","n","document","createElementNS","setAttributeNS","_getOffset","min","max","Math","random","_line","x1","y1","x2","y2","existingPath","lengthSq","pow","offset","sqrt","halfOffset","divergePoint","midDispX","midDispY","path","_continuousLine","move","overwrite","_curve","vertArray","vertArrayLength","length","b","s","i","cachedVertArray","_ellipse","ellipseInc","cx","cy","rx","ry","overlap","radOffset","PI","points","push","cos","sin","angle","line","parent","node","d","appendChild","rectangle","width","height","polygon","vertices","vCount","ellipse","abs","renderHachureLines","lines","gNode","prevPoint","forEach","l","options","bowing","curveStepCount","curveTightness","dashGap","dashOffset","fill","fillStyle","fillWeight","hachureAngle","hachureGap","maxRandomnessOffset","roughness","simplification","stroke","strokeWidth","zigzagOffset","hachureFill","hachureEllipseFill","helper","randOffset","_o","fire","element","name","detail","bubbles","composed","init","CE","window","SlickCustomEvent","CustomEvent","dispatchEvent"],"mappings":"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","sourcesContent":["import { hachureLinesForPolygon, hachureLinesForEllipse } from 'roughjs/bin/fillers/filler-utils';\nconst __maxRandomnessOffset = 2;\nconst __roughness = 1;\nconst __bowing = 0.85;\nconst __curveTightness = 0;\nconst __curveStepCount = 9;\nclass WiresPath {\n    constructor() {\n        this.p = '';\n    }\n    get value() {\n        return this.p.trim();\n    }\n    moveTo(x, y) {\n        this.p = `${this.p}M ${x} ${y} `;\n    }\n    bcurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.p = `${this.p}C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${x} ${y} `;\n    }\n}\nexport function svgNode(tagName, attributes) {\n    const n = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n    if (attributes) {\n        for (const p in attributes) {\n            n.setAttributeNS(null, p, attributes[p]);\n        }\n    }\n    return n;\n}\nfunction _getOffset(min, max) {\n    return __roughness * ((Math.random() * (max - min)) + min);\n}\nfunction _line(x1, y1, x2, y2, existingPath) {\n    const lengthSq = Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2);\n    let offset = __maxRandomnessOffset || 0;\n    if ((offset * offset * 100) > lengthSq) {\n        offset = Math.sqrt(lengthSq) / 10;\n    }\n    const halfOffset = offset / 2;\n    const divergePoint = 0.2 + Math.random() * 0.2;\n    let midDispX = __bowing * __maxRandomnessOffset * (y2 - y1) / 200;\n    let midDispY = __bowing * __maxRandomnessOffset * (x1 - x2) / 200;\n    midDispX = _getOffset(-midDispX, midDispX);\n    midDispY = _getOffset(-midDispY, midDispY);\n    const path = existingPath || new WiresPath();\n    path.moveTo(x1 + _getOffset(-offset, offset), y1 + _getOffset(-offset, offset));\n    path.bcurveTo(midDispX + x1 + (x2 - x1) * divergePoint + _getOffset(-offset, offset), midDispY + y1 + (y2 - y1) * divergePoint + _getOffset(-offset, offset), midDispX + x1 + 2 * (x2 - x1) * divergePoint + _getOffset(-offset, offset), midDispY + y1 + 2 * (y2 - y1) * divergePoint + _getOffset(-offset, offset), x2 + _getOffset(-offset, offset), y2 + _getOffset(-offset, offset));\n    path.moveTo(x1 + _getOffset(-halfOffset, halfOffset), y1 + _getOffset(-halfOffset, halfOffset));\n    path.bcurveTo(midDispX + x1 + (x2 - x1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispY + y1 + (y2 - y1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispX + x1 + 2 * (x2 - x1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispY + y1 + 2 * (y2 - y1) * divergePoint + _getOffset(-halfOffset, halfOffset), x2 + _getOffset(-halfOffset, halfOffset), y2 + _getOffset(-halfOffset, halfOffset));\n    return path;\n}\nfunction _continuousLine(x1, y1, x2, y2, move = false, overwrite = false, path) {\n    path = path || new WiresPath();\n    const lengthSq = Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2);\n    let offset = __maxRandomnessOffset || 0;\n    if ((offset * offset * 100) > lengthSq) {\n        offset = Math.sqrt(lengthSq) / 10;\n    }\n    const halfOffset = offset / 2;\n    const divergePoint = 0.2 + Math.random() * 0.2;\n    let midDispX = __bowing * __maxRandomnessOffset * (y2 - y1) / 200;\n    let midDispY = __bowing * __maxRandomnessOffset * (x1 - x2) / 200;\n    midDispX = _getOffset(-midDispX, midDispX);\n    midDispY = _getOffset(-midDispY, midDispY);\n    if (move) {\n        path.moveTo(x1 + _getOffset(-offset, offset), y1 + _getOffset(-offset, offset));\n    }\n    if (!overwrite) {\n        path.bcurveTo(midDispX + x1 + (x2 - x1) * divergePoint + _getOffset(-offset, offset), midDispY + y1 + (y2 - y1) * divergePoint + _getOffset(-offset, offset), midDispX + x1 + 2 * (x2 - x1) * divergePoint + _getOffset(-offset, offset), midDispY + y1 + 2 * (y2 - y1) * divergePoint + _getOffset(-offset, offset), x2 + _getOffset(-offset, offset), y2 + _getOffset(-offset, offset));\n    }\n    else {\n        path.bcurveTo(midDispX + x1 + (x2 - x1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispY + y1 + (y2 - y1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispX + x1 + 2 * (x2 - x1) * divergePoint + _getOffset(-halfOffset, halfOffset), midDispY + y1 + 2 * (y2 - y1) * divergePoint + _getOffset(-halfOffset, halfOffset), x2 + _getOffset(-halfOffset, halfOffset), y2 + _getOffset(-halfOffset, halfOffset));\n    }\n    return path;\n}\nfunction _curve(vertArray, existingPath) {\n    const vertArrayLength = vertArray.length;\n    let path = existingPath || new WiresPath();\n    if (vertArrayLength > 3) {\n        const b = [];\n        const s = 1 - __curveTightness;\n        path.moveTo(vertArray[1][0], vertArray[1][1]);\n        for (let i = 1; (i + 2) < vertArrayLength; i++) {\n            const cachedVertArray = vertArray[i];\n            b[0] = [cachedVertArray[0], cachedVertArray[1]];\n            b[1] = [cachedVertArray[0] + (s * vertArray[i + 1][0] - s * vertArray[i - 1][0]) / 6, cachedVertArray[1] + (s * vertArray[i + 1][1] - s * vertArray[i - 1][1]) / 6];\n            b[2] = [vertArray[i + 1][0] + (s * vertArray[i][0] - s * vertArray[i + 2][0]) / 6, vertArray[i + 1][1] + (s * vertArray[i][1] - s * vertArray[i + 2][1]) / 6];\n            b[3] = [vertArray[i + 1][0], vertArray[i + 1][1]];\n            path.bcurveTo(b[1][0], b[1][1], b[2][0], b[2][1], b[3][0], b[3][1]);\n        }\n    }\n    else if (vertArrayLength === 3) {\n        path.moveTo(vertArray[0][0], vertArray[0][1]);\n        path.bcurveTo(vertArray[1][0], vertArray[1][1], vertArray[2][0], vertArray[2][1], vertArray[2][0], vertArray[2][1]);\n    }\n    else if (vertArrayLength === 2) {\n        path = _line(vertArray[0][0], vertArray[0][1], vertArray[1][0], vertArray[1][1], path);\n    }\n    return path;\n}\nfunction _ellipse(ellipseInc, cx, cy, rx, ry, offset, overlap, existingPath) {\n    const radOffset = _getOffset(-0.5, 0.5) - Math.PI / 2;\n    const points = [];\n    points.push([\n        _getOffset(-offset, offset) + cx + 0.9 * rx * Math.cos(radOffset - ellipseInc),\n        _getOffset(-offset, offset) + cy + 0.9 * ry * Math.sin(radOffset - ellipseInc)\n    ]);\n    for (let angle = radOffset; angle < (Math.PI * 2 + radOffset - 0.01); angle = angle + ellipseInc) {\n        points.push([\n            _getOffset(-offset, offset) + cx + rx * Math.cos(angle),\n            _getOffset(-offset, offset) + cy + ry * Math.sin(angle)\n        ]);\n    }\n    points.push([\n        _getOffset(-offset, offset) + cx + rx * Math.cos(radOffset + Math.PI * 2 + overlap * 0.5),\n        _getOffset(-offset, offset) + cy + ry * Math.sin(radOffset + Math.PI * 2 + overlap * 0.5)\n    ]);\n    points.push([\n        _getOffset(-offset, offset) + cx + 0.98 * rx * Math.cos(radOffset + overlap),\n        _getOffset(-offset, offset) + cy + 0.98 * ry * Math.sin(radOffset + overlap)\n    ]);\n    points.push([\n        _getOffset(-offset, offset) + cx + 0.9 * rx * Math.cos(radOffset + overlap * 0.5),\n        _getOffset(-offset, offset) + cy + 0.9 * ry * Math.sin(radOffset + overlap * 0.5)\n    ]);\n    return _curve(points, existingPath);\n}\nexport function line(parent, x1, y1, x2, y2) {\n    const path = _line(x1, y1, x2, y2);\n    const node = svgNode('path', { d: path.value });\n    parent.appendChild(node);\n    return node;\n}\nexport function rectangle(parent, x, y, width, height) {\n    x = x + 2;\n    y = y + 2;\n    width = width - 4;\n    height = height - 4;\n    let path = _line(x, y, x + width, y);\n    path = _line(x + width, y, x + width, y + height, path);\n    path = _line(x + width, y + height, x, y + height, path);\n    path = _line(x, y + height, x, y, path);\n    const node = svgNode('path', { d: path.value });\n    parent.appendChild(node);\n    return node;\n}\nexport function polygon(parent, vertices) {\n    let path;\n    const vCount = vertices.length;\n    if (vCount > 2) {\n        for (let i = 0; i < 2; i++) {\n            let move = true;\n            for (let i = 1; i < vCount; i++) {\n                path = _continuousLine(vertices[i - 1][0], vertices[i - 1][1], vertices[i][0], vertices[i][1], move, i > 0, path);\n                move = false;\n            }\n            path = _continuousLine(vertices[vCount - 1][0], vertices[vCount - 1][1], vertices[0][0], vertices[0][1], move, i > 0, path);\n        }\n    }\n    else if (vCount === 2) {\n        path = _line(vertices[0][0], vertices[0][1], vertices[1][0], vertices[1][1]);\n    }\n    else {\n        path = new WiresPath();\n    }\n    const node = svgNode('path', { d: path.value });\n    parent.appendChild(node);\n    return node;\n}\nexport function ellipse(parent, x, y, width, height) {\n    width = Math.max(width > 10 ? width - 4 : width - 1, 1);\n    height = Math.max(height > 10 ? height - 4 : height - 1, 1);\n    const ellipseInc = (Math.PI * 2) / __curveStepCount;\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    rx += _getOffset(-rx * 0.05, rx * 0.05);\n    ry += _getOffset(-ry * 0.05, ry * 0.05);\n    let path = _ellipse(ellipseInc, x, y, rx, ry, 1, ellipseInc * _getOffset(0.1, _getOffset(0.4, 1)));\n    path = _ellipse(ellipseInc, x, y, rx, ry, 1.5, 0, path);\n    const node = svgNode('path', { d: path.value });\n    parent.appendChild(node);\n    return node;\n}\nfunction renderHachureLines(lines) {\n    const gNode = svgNode('g');\n    let prevPoint = null;\n    lines.forEach((l) => {\n        line(gNode, l[0][0], l[0][1], l[1][0], l[1][1]);\n        if (prevPoint) {\n            line(gNode, prevPoint[0], prevPoint[1], l[0][0], l[0][1]);\n        }\n        prevPoint = l[1];\n    });\n    return gNode;\n}\nconst options = {\n    bowing: __bowing,\n    curveStepCount: __curveStepCount,\n    curveTightness: __curveTightness,\n    dashGap: 0,\n    dashOffset: 0,\n    fill: '#000',\n    fillStyle: 'hachure',\n    fillWeight: 1,\n    hachureAngle: -41,\n    hachureGap: 5,\n    maxRandomnessOffset: __maxRandomnessOffset,\n    roughness: __roughness,\n    simplification: 1,\n    stroke: '#000',\n    strokeWidth: 2,\n    zigzagOffset: 0\n};\nexport function hachureFill(points) {\n    const lines = hachureLinesForPolygon(points, options);\n    return renderHachureLines(lines);\n}\nexport function hachureEllipseFill(cx, cy, width, height) {\n    const helper = {\n        randOffset(x, _o) {\n            return _getOffset(-x, x);\n        }\n    };\n    const lines = hachureLinesForEllipse(helper, cx, cy, width, height, options);\n    return renderHachureLines(lines);\n}\nexport function fire(element, name, detail, bubbles = true, composed = true) {\n    if (name) {\n        const init = {\n            bubbles: (typeof bubbles === 'boolean') ? bubbles : true,\n            composed: (typeof composed === 'boolean') ? composed : true\n        };\n        if (detail) {\n            init.detail = detail;\n        }\n        const CE = (window.SlickCustomEvent || CustomEvent);\n        element.dispatchEvent(new CE(name, init));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}